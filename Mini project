const { test,expect } = require("@playwright/test");

const { defineConfig } = require('@playwright/test');

module.exports = defineConfig({
  timeout: 60000, // 60 seconds per test
  retries: 2, // Retry failed tests up to 2 times
  projects: [
    {
      name: 'Google Chrome',
      use: {
        browserName: 'chromium',
        headless: false, // Run in headful mode
      },
    },
    {
      name: 'Firefox',
      use: {
        browserName: 'firefox',
        headless: true,
      },
    },
  ],
  shard: { total: 2, current: 1 }, // Parallel execution by splitting the test suite
  use: {
    baseURL: 'https://google.com', // Example base URL
    trace: 'on', // Enable tracing
  },
});
const { test, expect } = require('@playwright/test');

test.describe('Home Page Tests', () => {

  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('Navigation Links - Home Link', async ({ page }) => {
    await page.click('text=Home');
    await expect(page).toHaveURL('https://google.com/home');
  });

  test('Search Functionality', async ({ page }) => {
    await page.fill('input[name="q"]', 'Playwright');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL(/.*search.*/);
    await expect(page.locator('h1')).toHaveText('Search Results');
  });

  test('Responsive Navigation Bar', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.click('button.burger-menu');
    await expect(page.locator('.navbar')).toBeVisible();
  });

  // Additional test cases
});
const { test, expect } = require('@playwright/test');

test.describe('Home Page Tests', () => {

  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('Navigation Links - Home Link', async ({ page }) => {
    await page.click('text=Home');
    await expect(page).toHaveURL('https://google.com/home');
  });

  test('Search Functionality', async ({ page }) => {
    await page.fill('input[name="q"]', 'Playwright');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL(/.*search.*/);
    await expect(page.locator('h1')).toHaveText('Search Results');
  });

  test('Responsive Navigation Bar', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.click('button.burger-menu');
    await expect(page.locator('.navbar')).toBeVisible();
  });

  // Additional test cases
});
const { test, expect } = require('@playwright/test');

test.describe('Login Page Tests', () => {

  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
  });

  test('Valid Login', async ({ page }) => {
    await page.fill('input[name="username"]', 'testuser');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/profile');
  });

  test('Invalid Login', async ({ page }) => {
    await page.fill('input[name="username"]', 'wronguser');
    await page.fill('input[name="password"]', 'wrongpassword');
    await page.click('button[type="submit"]');
    await expect(page.locator('.error')).toHaveText('Invalid credentials');
  });

  test('Remember Me Checkbox', async ({ page }) => {
    await page.check('input[name="remember"]');
    await page.click('button[type="submit"]');
    await expect(page.locator('input[name="remember"]')).toBeChecked();
  });

  // Additional test cases
});
const { test, expect } = require('@playwright/test');

test.describe('Profile Page Tests', () => {

  test.use({ storageState: 'state.json' }); // Use fixture for logged-in state

  test.beforeEach(async ({ page }) => {
    await page.goto('/profile');
  });

  test('Update Profile Information', async ({ page }) => {
    await page.fill('input[name="fullname"]', 'Test User');
    await page.click('button[type="submit"]');
    await expect(page.locator('.profile-name')).toHaveText('Test User');
  });

  test('Upload Profile Picture', async ({ page }) => {
    const filePath = 'path/to/profile-pic.jpg';
    await page.setInputFiles('input[type="file"]', filePath);
    await page.click('button.upload-button');
    await expect(page.locator('.profile-pic')).toHaveAttribute('src', /profile-pic.jpg/);
  });

  // Additional test cases
});
